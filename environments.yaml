# reasons you might want to use `environment.yaml` instead of `requirements.txt`:
# - pip installs packages in a loop, without ensuring dependencies across all packages
#   are fulfilled simultaneously, but conda achieves proper dependency control across
#   all packages
# - conda allows for installing packages without requiring certain compilers or
#   libraries to be available in the system, since it installs precompiled binaries

name: main

channels:
  - conda-forge
  - pytorch
  - nvidia
  - defaults

# it is strongly recommended to specify versions of packages installed through conda
# to avoid situation when version-unspecified packages install their latest major
# versions which can sometimes break things

# current approach below keeps the dependencies in the same major versions across all
# users, but allows for different minor and patch versions of packages where backwards
# compatibility is usually guaranteed

dependencies:
  - python=3.10
  - pytorch=2.0.1=py3.10_cuda11.8_cudnn8.7.0_0
  - torchvision
  - chardet

  - pip>=23
  - pip:
      # ------- PyTorch ------- #
      - torchinfo >= 1.7.2
      - lightning >= 2.0.0
      # - DeepXDE >= 1.8.4
      # ------- hydra --------- #
      - hydra-core >= 1.3.2
      - hydra-colorlog >= 1.2.0
      - hydra-optuna-sweeper >= 1.2.0
      # ------ loggers -------- #
      - wandb >= 0.15.4
      # - mlflow >= 2.4.1
      # - neptune-client
      # - comet-ml >= 3.33.4
      - tensorboard >= 2.13.0
      # --------- JAX --------- #
      - --find-links https://storage.googleapis.com/jax-releases/jax_cuda_releases.html
      - jax[cuda]==0.4.11
      # ------- others -------- #
      - matplotlib
      - pyrootutils
      - pre-commit
      - rich
      - pytest
      - sh
      # ------ notebooks ------ #
      - jupyter
      - notebook
      - ipykernel
      - ipywidgets
      # --- version control --- #
      - dvc >= 3.0.0
